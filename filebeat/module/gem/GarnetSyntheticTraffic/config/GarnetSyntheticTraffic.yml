type: log
paths:
{{ range $i, $path := .paths }}
 - {{$path}}
{{ end }}
exclude_files: [".gz$"]

harvester_buffer_size: 200000

close_eof: true
clean_removed: true

include_lines: ['^\s*[0-9]+: system.cpu[0-9]+: Generated packet with destination ','^\s*0: system.cpu[0-9]+: Config Created']
# ignore the "created" lines and "complete injection lines"
#include_lines: ''

processors:
- add_locale: ~
- script:
    lang: javascript
    id: gem_GarnetSyntheticTraffic
    params:
      m5outTime: "${M5OUT_MODIFICATION_TIME_FIELD}"
    source: >
      var m5outTime;
      function register(scriptParams) {
          m5outTime = scriptParams.m5outTime;
      }
      function process(event) {
          event.Delete("event.module");
          event.Delete("input.type");
          event.Delete("log.file");
          event.Delete("log.offset");
          event.Delete("log.flags");
          event.Delete("fileset.name");
          event.Delete("service.type");
          event.Put("gem5.timestamp", m5outTime);

          var message = event.Get("message");
          if (message.match(/\d+/)[0] != '0') {
              var nums = message.match(/\d+/g);
              event.Put("gem5.GarnetSyntheticTraffic.link.tick", Number(nums[0]));
              event.Put("gem5.GarnetSyntheticTraffic.link.cpu_id", Number(nums[1]));
              event.Put("gem5.GarnetSyntheticTraffic.link.destination_cpu_id", Number(nums[2]));
              //event.Put("gem5.GarnetSyntheticTraffic.link.address", Number(nums[2]));
          } else {
              var nums = message.match(/\d+/g);
              //because beats events are discret, cannot use AppendTo
              //event.AppendTo("gem5.GarnetSyntheticTraffic.node", Number(nums[1]));
              event.Put("gem5.GarnetSyntheticTraffic.node.cpu_id", Number(nums[1]));
          }

          event.Delete("message");
      }
